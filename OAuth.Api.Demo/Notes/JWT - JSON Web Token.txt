https://app.pluralsight.com/library/courses/oauth2-json-web-tokens-openid-connect-introduction/table-of-contents

# JWT - JSON Web Token

JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties. The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.
http://self-issued.info/docs/draft-ietf-oauth-json-web-token.html

# Glossary 

Client - requests the token
Issue - issues the token
Resource - consumes the token which has trust relationship with issuer

# JWT structure

Header
"typ" (Type) Header Parameter
"cty" (Content Type) Header Parameter

Claims
"iss" (Issuer) Claim
"aud" (Audience) Claim
"iat" (Issued At) Claim
"sub" (Subject) Claim
"exp" (Expiration Time) Claim
"nbf" (Not Before) Claim
"jti" (JWT ID) Claim

# Example
 
 Header
 {"typ":"JWT",
   "alg":"HS256"
 }

 Claim
 {"iss":"joe",
  "exp":1300819380,
  "aud": "http://myResource",
  "sub": "alice",
  "client": "xyz",
  "scope": ["read", "search"]
 }

# Serialization 
Base64url encoding the JWS Payload yields this encoded JWS Payload (this is comprised of the header, claims, and the signature):
 eyJpc3MiOiJqb2UiLA0.KICJleHAiOjEzMDA4MTkzODAsDQogImh0dHA6Ly9leGFtcGx.LmNvbS9pc19yb290Ijp0cnVlfQ

# Creation
Can use the NuGet package for Microsoft.IdentityModel.Tokens.JWT

// create
var token = new JWTSecurityToken(
		issuer: "http://myIssuer",
		audience: "http://myResource",
		claims: GetClaims(),
		signingCredentials: GetKey(),
		validFrom: DateTime.UtcNow,
		validTo: DateTime.UtcNow.AddHours(1)
);

// serialize
var tokenString = new JWTSecurityTokenHandler().WriteToken(token);

# Consume the token

// retrieve from header, query string, etc.
var token = new JWTSecurityToken(tokenString);

// validate
var validationParams = new TokenValidationParameters 
{
	ValidIssuer = "http://myIssuer",
	AllowedAudience = "http://myResource",
	SigningToken = GetSigningKey()
};
var handler = new JWTSecurityTokenHandler();
var principal = handler.ValidateToken(token, validationParams);

